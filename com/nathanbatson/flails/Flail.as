/* * Author: Nathan Batson * Copyright (c) nathanbatson.com 2009 * Version: 0.2.1 */package com.nathanbatson.flails{	import flash.events.Event;	import flash.net.*;	/*	 * The flails main class	 */	public class Flail	{		public var loaded:XML;				public function Flail(route:String)		{			//create the xml loader			var xmlLoader:URLLoader = new URLLoader();			var xmlData:XML = new XML();						//set the listener for the xml loaded function			xmlLoader.addEventListener(Event.COMPLETE, xmlLoded);						//load the xml file			xmlLoader.load(new URLRequest(route));		}		//the xml is loaded function		private function xmlLoded(e:Event):void		{				var modelXML:XML = new XML(e.target.data);						//build a generic object to hold the data			var railsObject:Object = new Object();						//build the object based on xml and set it to a generic object			railsObject = buildObject(modelXML.children()[0])		}				/*		  		  Function: Build Object		  		  Takes xml from the rails to_xml function and uses and builds an object to match		  the original object in rails.				*/				private function buildObject(model:XML):Object		{		  		  //create the empty results object		  var resultObj:Object = new Object();		  		  for(var i:int = 0; i < model.children().length(); i++){		    		    //get the current object		    var currentNode:XML = model.children()[i];		    		    if (currentNode.attribute("type") == "array"){ //if there are children in the node we need to recurse		      var objArray:Array = new Array();		      		      //recurse so we can have an object built for any sub 		      objArray = buildArray(currentNode)		      		      //set the results to the local name of the xml this lets us use the same syntax as rails firm.clients		      resultObj[ String(currentNode.name().localName) ] = objArray;		    }else{		      		      //I'm ignoring datatypes for now until I can confirm that everything works well.		      		      //set the result		      resultObj[ String(currentNode.name().localName) ] = currentNode;		    		    }		  }		  		  return resultObj;		  		}				/*		  		  Function: Build Array 		  		  Takes an array from the rails to_xml function and uses the buildObject function to 		  build each object in the array				*/				private function buildArray(model:XML):Array		{		  //create the empty results object		  var resultArray:Array = new Array();		  		  for(var i:int = 0; i < model.children().length(); i++){		    		    //get the current object		    var currentNode:XML = model.children()[i]; 		    var nodeObj:Array = new Array();		      	      //recurse so we can have an object built for any sub 	      resultArray.push( buildObject(currentNode) );		  }		  		  return resultArray;		}			}}